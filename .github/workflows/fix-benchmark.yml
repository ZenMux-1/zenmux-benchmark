# ZenMux HLE Benchmark Fix GitHub Actions Workflow
name: ZenMux HLE Benchmark Fix

on:
  workflow_dispatch:
    inputs:
      timestamp_dir:
        description: 'Timestamp directory to fix (e.g., "20250922_093840")'
        required: true
        type: string
      num_workers:
        description: 'Number of concurrent workers'
        required: false
        default: '3'
      max_concurrent_models:
        description: 'Maximum number of models to evaluate concurrently'
        required: false
        default: '100'
      print_streaming:
        description: 'Print streaming responses to console'
        type: boolean
        default: false
      commit_results:
        description: 'Commit and push fixed results to repository'
        type: boolean
        default: true

jobs:
  fix-benchmark:
    runs-on: ubuntu-latest
    timeout-minutes: 480  # 8 hours max
    permissions:
      contents: write  # Required for git push

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: uv sync

    - name: Download previous results
      uses: actions/download-artifact@v4
      with:
        pattern: 'benchmark-results-*'
        path: downloaded-artifacts
        merge-multiple: true
      continue-on-error: true

    - name: Setup results directory
      run: |
        # Create results directory structure
        mkdir -p results
        mkdir -p artifacts

        # Try to restore from artifacts if available
        if [ -d "downloaded-artifacts/results" ]; then
          cp -r downloaded-artifacts/results/* results/ || true
        fi

        # Validate timestamp directory exists
        TIMESTAMP_DIR="${{ github.event.inputs.timestamp_dir }}"
        if [ ! -d "results/$TIMESTAMP_DIR" ]; then
          echo "Error: Timestamp directory results/$TIMESTAMP_DIR not found"
          echo "Available directories:"
          ls -la results/ || echo "No results directory found"
          exit 1
        fi

    - name: Run fix benchmark
      env:
        ZENMUX_API_KEY: ${{ secrets.ZENMUX_API_KEY }}
        ZENMUX_BASE_URL: ${{ secrets.ZENMUX_BASE_URL }}
        ZENMUX_API_BASE_URL: ${{ secrets.ZENMUX_API_BASE_URL }}
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        HUGGING_FACE_HUB_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        # Optional arguments
        STREAMING_ARG=""
        if [ "${{ github.event.inputs.print_streaming }}" = "true" ]; then
          STREAMING_ARG="--print-streaming"
        fi

        NUM_WORKERS="${{ github.event.inputs.num_workers || '3' }}"
        MAX_CONCURRENT_MODELS="${{ github.event.inputs.max_concurrent_models || '60' }}"
        TIMESTAMP_DIR="${{ github.event.inputs.timestamp_dir }}"

        # Run fix command
        uv run python benchmark.py \
          --fix "results/$TIMESTAMP_DIR" \
          $STREAMING_ARG \
          --num-workers $NUM_WORKERS \
          --max-concurrent-models $MAX_CONCURRENT_MODELS

    - name: Generate fix summary report
      run: |
        TIMESTAMP_DIR="${{ github.event.inputs.timestamp_dir }}"

        echo "# ZenMux HLE Benchmark Fix Results" > artifacts/fix-summary.md
        echo "**Date:** $(date)" >> artifacts/fix-summary.md
        echo "**Commit:** $GITHUB_SHA" >> artifacts/fix-summary.md
        echo "**Original Timestamp:** $TIMESTAMP_DIR" >> artifacts/fix-summary.md
        echo "**Workers:** ${{ github.event.inputs.num_workers }}" >> artifacts/fix-summary.md
        echo "**Max Concurrent Models:** ${{ github.event.inputs.max_concurrent_models }}" >> artifacts/fix-summary.md
        echo "" >> artifacts/fix-summary.md

        RESULTS_DIR="results/$TIMESTAMP_DIR"
        if [ -d "$RESULTS_DIR" ]; then
          echo "## Fixed Results Directory: $RESULTS_DIR" >> artifacts/fix-summary.md
          echo "" >> artifacts/fix-summary.md

          echo "### Updated Statistics Files" >> artifacts/fix-summary.md
          ls -la $RESULTS_DIR/*.json 2>/dev/null | grep -E "(evaluation|judge|metrics)_statistics" >> artifacts/fix-summary.md || echo "No statistics files found" >> artifacts/fix-summary.md
          echo "" >> artifacts/fix-summary.md

          echo "### Updated Predictions" >> artifacts/fix-summary.md
          echo "Count: $(ls $RESULTS_DIR/predictions/ 2>/dev/null | wc -l)" >> artifacts/fix-summary.md
          ls -la $RESULTS_DIR/predictions/ 2>/dev/null | head -10 >> artifacts/fix-summary.md || echo "No prediction files found" >> artifacts/fix-summary.md
          echo "" >> artifacts/fix-summary.md

          echo "### Updated Judged Results" >> artifacts/fix-summary.md
          echo "Count: $(ls $RESULTS_DIR/judged/ 2>/dev/null | wc -l)" >> artifacts/fix-summary.md
          ls -la $RESULTS_DIR/judged/ 2>/dev/null | head -10 >> artifacts/fix-summary.md || echo "No judged files found" >> artifacts/fix-summary.md
          echo "" >> artifacts/fix-summary.md

          echo "### Fix Logs" >> artifacts/fix-summary.md
          LOG_DIR=$(find logs -name "2*" -type d | tail -1)
          if [ -n "$LOG_DIR" ]; then
            echo "Latest log directory: $LOG_DIR" >> artifacts/fix-summary.md
            ls -la $LOG_DIR/ 2>/dev/null >> artifacts/fix-summary.md || echo "No log files found" >> artifacts/fix-summary.md
            echo "" >> artifacts/fix-summary.md

            # Show recent errors if any
            if [ -f "$LOG_DIR/errors.log" ]; then
              echo "### Recent Errors (last 20 lines)" >> artifacts/fix-summary.md
              tail -20 "$LOG_DIR/errors.log" >> artifacts/fix-summary.md || echo "Could not read errors.log" >> artifacts/fix-summary.md
            fi
          else
            echo "No log directory found" >> artifacts/fix-summary.md
          fi
          echo "" >> artifacts/fix-summary.md

          echo "## Directory Size After Fix" >> artifacts/fix-summary.md
          du -sh $RESULTS_DIR/ >> artifacts/fix-summary.md || echo "Could not calculate directory size" >> artifacts/fix-summary.md
        else
          echo "Results directory not found after fix" >> artifacts/fix-summary.md
        fi

    - name: Setup Git for commits
      if: github.event.inputs.commit_results == 'true'
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Commit and push fixed results
      if: github.event.inputs.commit_results == 'true'
      run: |
        # Check if there are any changes to commit
        if [[ -n $(git status --porcelain) ]]; then
          echo "Changes detected, committing fixed results..."

          # Add results and logs directories
          git add results/ logs/ || true

          # Create commit message with fix details
          git commit -m "Fix benchmark results for ${{ github.event.inputs.timestamp_dir }}

          Original Timestamp: ${{ github.event.inputs.timestamp_dir }}
          Workers: ${{ github.event.inputs.num_workers }}
          Max Concurrent Models: ${{ github.event.inputs.max_concurrent_models }}
          Fixed Run ID: ${{ github.run_id }}
          Commit: ${{ github.sha }}

          ðŸ”§ Fixed by GitHub Actions"

          # Push to repository
          git push
          echo "Fixed results committed and pushed successfully!"
        else
          echo "No changes to commit."
        fi

    - name: Emergency commit on failure
      if: failure() && github.event.inputs.commit_results == 'true'
      run: |
        # Setup Git if not already done
        git config --global user.name "github-actions[bot]" || true
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com" || true

        # Check if there are any changes to commit
        if [[ -n $(git status --porcelain) ]]; then
          echo "Emergency commit: Changes detected after fix failure, saving partial results..."

          # Add results and logs directories
          git add results/ logs/ || true

          # Create emergency commit message
          git commit -m "Emergency commit: Partial fix results from failed GitHub Actions run

          Original Timestamp: ${{ github.event.inputs.timestamp_dir }}
          Workers: ${{ github.event.inputs.num_workers }}
          Max Concurrent Models: ${{ github.event.inputs.max_concurrent_models }}
          Fixed Run ID: ${{ github.run_id }}
          Commit: ${{ github.sha }}
          Status: FAILED - Partial fix results saved

          ðŸš¨ Emergency commit to prevent data loss - Fixed by GitHub Actions"

          # Push to repository
          git push || echo "Failed to push emergency commit, but changes are staged locally"
          echo "Emergency commit completed successfully!"
        else
          echo "No changes to commit in emergency situation."
        fi

    - name: Upload fixed results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: fixed-benchmark-results-${{ github.event.inputs.timestamp_dir }}-${{ github.run_number }}
        path: |
          results/
          logs/
          artifacts/
        retention-days: 30

    - name: Upload fix summary
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: fix-summary-${{ github.event.inputs.timestamp_dir }}-${{ github.run_number }}
        path: artifacts/fix-summary.md
        retention-days: 90

  # Optional: Send notification on completion
  notify:
    needs: fix-benchmark
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify fix completion
      run: |
        echo "Benchmark fix completed with status: ${{ needs.fix-benchmark.result }}"
        echo "Fixed timestamp directory: ${{ github.event.inputs.timestamp_dir }}"
        # Add your notification logic here (Slack, Discord, etc.)